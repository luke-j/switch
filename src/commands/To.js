/**
 * @license
 *
 * Copyright 2016- Luke Jones (https://github.com/luke-j)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import SpiderMonkey from '../SpiderMonkey';
import Generator from '../Generator';
import Config from '../Config';
import Handlebars from 'handlebars';
import NginxContext from '../context/NginxContext';
import NginxCompiler from '../compiler/NginxCompiler';
import NginxSyntax from '../syntax/NginxSyntax';
import ApacheContext from '../context/ApacheContext';
import ApacheCompiler from '../compiler/ApacheCompiler';
import ApacheSyntax from '../syntax/ApacheSyntax';

export default class To {

	/**
	 * Handles actions required to perform the "to" command
	 *
	 * @constructor
	 * @param {String} use - The server software to use, ie. nginx
	 * @param {String} config - A JSON string read from the config file
	 * @param {String} source - The Switch source directory
	 */
	constructor(use, config, source) {
		this._use = use.toLowerCase();
		this._config = config && JSON.parse(config);
		this._source = source;
		this._output = '';
	}

	/**
	 * Iterates over server names and delegates their config options to be built into apache or nginx conf strings
	 *
	 * @returns {String}
	 */
	generate() {
		const header = `# Automatically generated by Switch - ${new Date().toUTCString()}\n\n`;

		for (const server in this._config) {
			if (this._config.hasOwnProperty(server)) {
				this._buildConf(server);
			}
		}

		return header + this._output;
	}

	/**
	 * Builds a config instance and passes the necessary dependencies to the Generator instance to be parsed and compiled into conf
	 *
	 * @param {String} server
	 * @private
	 */
	_buildConf(server) {
		const config = new Config(this._use, server, this._config[server]);
		let builder;

		switch (this._use) {
			case 'nginx':
				builder = new Generator(
					config,
					NginxContext,
					NginxCompiler,
					NginxSyntax,
					Handlebars,
					SpiderMonkey.read(this._source + 'src/templates/nginx.hbs')
				).build();
				break;
			case 'apache':
				builder = new Generator(
					config,
					ApacheContext,
					ApacheCompiler,
					ApacheSyntax,
					Handlebars,
					SpiderMonkey.read(this._source + 'src/templates/apache.hbs')
				).build();
				break;
			default:
				throw new Error(`Invalid "to" parameter ${this._use}`);
		}

		this._output += builder.output();
	}
}